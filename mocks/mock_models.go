// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gregoryusip/first-project/models (interfaces: ProductModel)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/gregoryusip/first-project/models"
	reflect "reflect"
)

// MockProductModel is a mock of ProductModel interface
type MockProductModel struct {
	ctrl     *gomock.Controller
	recorder *MockProductModelMockRecorder
}

// MockProductModelMockRecorder is the mock recorder for MockProductModel
type MockProductModelMockRecorder struct {
	mock *MockProductModel
}

// NewMockProductModel creates a new mock instance
func NewMockProductModel(ctrl *gomock.Controller) *MockProductModel {
	mock := &MockProductModel{ctrl: ctrl}
	mock.recorder = &MockProductModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductModel) EXPECT() *MockProductModelMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method
func (m *MockProductModel) CreateProduct(arg0 models.Products) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct
func (mr *MockProductModelMockRecorder) CreateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductModel)(nil).CreateProduct), arg0)
}

// DeleteProduct mocks base method
func (m *MockProductModel) DeleteProduct(arg0 string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0)
	ret0, _ := ret[0].(int64)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct
func (mr *MockProductModelMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductModel)(nil).DeleteProduct), arg0)
}

// ReadProduct mocks base method
func (m *MockProductModel) ReadProduct() ([]models.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProduct")
	ret0, _ := ret[0].([]models.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProduct indicates an expected call of ReadProduct
func (mr *MockProductModelMockRecorder) ReadProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProduct", reflect.TypeOf((*MockProductModel)(nil).ReadProduct))
}

// UpdateProduct mocks base method
func (m *MockProductModel) UpdateProduct(arg0 string, arg1 models.Products) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct
func (mr *MockProductModelMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductModel)(nil).UpdateProduct), arg0, arg1)
}
